class Diagnostic(location: TextLocation, message: string) {
    def to_string(): string = location.to_string() + ": " + message
}

class DiagnosticBag() {
    var _size = 0
    var _items: Array<Diagnostic> = new Diagnostic[0]

    def report(location: TextLocation, message: string): unit = add(new Diagnostic(location, message))

    def report_bad_character(location: TextLocation, value: char) = report(location, "Invalid character in input: " + string(value))
    def report_empty_char_literal(location: TextLocation) = report(location, "Empty character literal")
    def report_unterminated_block_comment(location: TextLocation) = report(location, "Unterminated block comment")
    def report_unterminated_char(location: TextLocation) = report(location, "Unterminated character literal")
    def report_unterminated_string(location: TextLocation) = report(location, "Unterminated string literal")
    def report_unexpected_token(location: TextLocation, currentKind: int, expectedKind: int) =
        report(location, "Unexpected token " + SyntaxFacts.get_kind_name(currentKind) + ", expected " + SyntaxFacts.get_kind_name(expectedKind))
    def report_invalid_escape_sequence(location: TextLocation, current: char) =
        report(location, "Invalid character in escape sequence: " + string(current))

    def ensure_capacity(count: int): unit = {
        if (_size + count >= _items.Length) {
            var newItems = new Diagnostic[(_size + count) * 2]
            for (i <- 0 to _size) {
                newItems[i] = _items[i]
            }
            _items = newItems
        } else {
            ()
        }
    }

    def add(diagnostic: Diagnostic): unit = {
        ensure_capacity(1)
        _items[_size] = diagnostic
        _size = _size + 1
    }

    def diagnostics(): Array<Diagnostic> = {
        var newItems = new Diagnostic[_size]
        for (i <- 0 to _size) {
            newItems[i] = _items[i]
        }
        newItems
    }
}


class Result(is_success: bool, value: any)

object MakeResult {
    val fail = new Result(false, 0)

    def success(value: any) = new Result(true, value)
}

class Scanner(source_file: SourceFile, diagnostics: DiagnosticBag) {
    var _position: int = 0
    var debug = false

    def peek(position: int): char = source_file.get(position)

    def current(): char = peek(_position)
    def lookahead(): char = peek(_position + 1)

    def next(): unit = {
        if (debug) {
            println("accepting: " + string(current()))
        } else ()
        
        _position = _position + 1
    }

    def is_letter(c: char): bool = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
    def is_digit(c: char): bool = (c >= '0' && c <= '9')
    def is_ident_start(c: char): bool = is_letter(c) || c == '_'
    def is_ident(c: char): bool = is_letter(c) || is_digit(c) || c == '_'
    def is_eol(c: char): bool = c == '\n' || c == '\r'
    def is_whitespace(c: char): bool = 
        c == '\u0009' || c == '\u000A' || c == '\u000B' || c == '\u000C' || c == '\u000D' || c == '\u0020' ||
        c == '\u0020' || c == '\u0085' || c == '\u00A0' || c == '\u1680' || c == '\u2000' || c == '\u2001' ||
        c == '\u2002' || c == '\u2002' || c == '\u2002' || c == '\u2003' || c == '\u2003' || c == '\u2003' ||
        c == '\u2004' || c == '\u2005' || c == '\u2006' || c == '\u2007' || c == '\u2008' || c == '\u2008' ||
        c == '\u2009' || c == '\u2009' || c == '\u2009' || c == '\u200A' || c == '\u2028' || c == '\u2029' ||
        c == '\u202F' || c == '\u205F' || c == '\u3000'

    def is_non_nl_whitespace(c: char): bool = !is_eol(c) && is_whitespace(c)

    def is_start_token(c: char): bool =
        c == '-' || c == ',' || c == ':' || c == '!' || c == '.' || c == '(' || c == ')' || c == '[' || c == ']' || 
        c == '{' || c == '}' || c == '*' || c == '/' || c == '\'' || c == '\"' || c == '&' || c == '+' || c == '<' || 
        c == '=' || c == '>' || c == '|'

    def is_invalid_token_trivia(c: char): bool = c != '\0' && !is_start_token(c) && !is_digit(c) && !is_ident_start(c)

    def hex_value(): int = Hex.from_char(current())

    def scan() : SyntaxToken = {
        val leading = scan_trivia(true)
        val token = scan_simple_token()
        val trailing = scan_trivia(true)

        new SyntaxToken(source_file, token.kind, token.start, token.text, token.value, leading, trailing)
    }

    def scan_simple_token(): SimpleToken = {
        val curr = current()
        val look = lookahead()
        if (curr == '\0') {
            new SimpleToken(SyntaxKind.EndOfInputToken, _position, "", MakeSyntaxTokenValue.none())
        } else if (curr == '.') {
            scan_simple_one(SyntaxKind.DotToken)
        } else if (curr == '(') {
            scan_simple_one(SyntaxKind.OpenParenToken)
        } else if (curr == ')') {
            scan_simple_one(SyntaxKind.CloseParenToken)
        } else if (curr == ':') {
            scan_simple_one(SyntaxKind.ColonToken)
        } else if (curr == ',') {
            scan_simple_one(SyntaxKind.CommaToken)
        } else if (curr == '<' && look == '=') {
            scan_simple_two(SyntaxKind.LessThanEqualsToken)
        } else if (curr == '<' && look == '-') {
            scan_simple_two(SyntaxKind.LessThanDashToken)
        } else if (curr == '<') {
            scan_simple_one(SyntaxKind.LessThanToken)
        } else if (curr == '>' && look == '=') {
            scan_simple_two(SyntaxKind.GreaterThanEqualsToken)
        } else if (curr == '>') {
            scan_simple_one(SyntaxKind.GreaterThanToken)
        } else if (curr == '=' && look == '=') {
            scan_simple_two(SyntaxKind.EqualsEqualsToken)
        } else if (curr == '=') {
            scan_simple_one(SyntaxKind.EqualsToken)
        } else if (curr == '!' && look == '=') {
            scan_simple_two(SyntaxKind.BangEqualsToken)
        } else if (curr == '!') {
            scan_simple_one(SyntaxKind.BangToken)
        } else if (curr == '{') {
            scan_simple_one(SyntaxKind.OpenBraceToken)
        } else if (curr == '}') {
            scan_simple_one(SyntaxKind.CloseBraceToken)
        } else if (curr == '[') {
            scan_simple_one(SyntaxKind.OpenBracketToken)
        } else if (curr == ']') {
            scan_simple_one(SyntaxKind.CloseBracketToken)
        } else if (curr == '+') {
            scan_simple_one(SyntaxKind.PlusToken)
        } else if (curr == '-') {
            scan_simple_one(SyntaxKind.DashToken)
        } else if (curr == '/') {
            scan_simple_one(SyntaxKind.SlashToken)
        } else if (curr == '*') {
            scan_simple_one(SyntaxKind.StarToken)
        } else if (curr == '&' && look == '&') {
            scan_simple_two(SyntaxKind.AmpersandAmpersandToken)
        } else if (curr == '&') {
            scan_simple_one(SyntaxKind.AmpersandToken)
        } else if (curr == '|' && look == '|') {
            scan_simple_two(SyntaxKind.PipePipeToken)
        } else if (curr == '|') {
            scan_simple_one(SyntaxKind.PipeToken)
        } else if (curr == '\"') {
            scan_string()
        } else if (curr == '\'') {
            scan_char()
        } else if (is_digit(curr)) {
            scan_number()
        } else if (is_ident_start(curr)) {
            scan_ident()
        } else {
            scan_invalid_token()
        }
    }

    def scan_invalid_token(): SimpleToken = {
        diagnostics.report_bad_character(new TextLocation(source_file, new TextSpan(_position, 0)), current())
        val token = new SimpleToken(SyntaxKind.InvalidTokenTrivia, _position, "", MakeSyntaxTokenValue.none())
        next()
        token
    }

    def scan_escape_sequence(): Result = {
        val start = _position
        next() // accept '\'
        val curr = current()
        if (curr == '\'') {
            next()
            MakeResult.success("\'")
        } else if (curr == 'r') {
            next()
            MakeResult.success("\r")
        } else if (curr == 'n') {
            next()
            MakeResult.success("\n")
        } else if (curr == 't') {
            next()
            MakeResult.success("\t")
        } else if (curr == '\\') {
            next()
            MakeResult.success("\\")
        } else if (curr == '"') {
            next()
            MakeResult.success("\"")
        } else if (curr == '0') {
            next()
            MakeResult.success("\0")
        } else if (curr == 'u') {
            next()
            scan_utf_escape_sequence(4, start)
        } else if (curr == 'U') {
            next()
            scan_utf_escape_sequence(8, start)
        } else {
            println("scan error - unexpected escape char: " + string(curr))

            MakeResult.fail
        }
    }

    def scan_utf_escape_sequence(digits: int, start: int): Result =
        scan_utf_escape_sequence(digits, start, 0)

    def scan_utf_escape_sequence(digits: int, start: int, value: int): Result = {
        if (digits > 0) {
            val hexValue = hex_value()
            if (hexValue == -1) {
                // TODO: could throw if we are at EOF
                diagnostics.report_invalid_escape_sequence(new TextLocation(source_file, new TextSpan(start, _position)), current())
                MakeResult.fail
            } else {
                next() // consume the hex digit
                // TODO: support shifts
                // scan_utf_escape_sequence(digits - 1, start, value + (hexValue << (4 * (digits - 1))))
                // TODO: support exponents
                // scan_utf_escape_sequence(digits - 1, start, value + hexValue * (2 ^ 4 * (digits - 1)))
                scan_utf_escape_sequence(digits - 1, start, value + hexValue * Math.pow(2, 4 * (digits - 1)))
            }
        } else {
            MakeResult.success(string(char(value)))
        }
    }

    def scan_string(): SimpleToken = {
        val start = _position
        next() // opening "
        var value = ""

        while (true) {
            val curr = current()
            if (curr == '"') {
                next() // end "
                break
            } else if (curr == '\\') {
                val escape = scan_escape_sequence()
                if (escape.is_success) {
                    value = value + string(escape.value)
                } else {
                }
                continue
            } else if (curr == '\r' || curr == '\n' || curr == '\0') {
                diagnostics.report_unterminated_string(new TextLocation(source_file, new TextSpan(start, 1)))
                break
            } else {
                value = value + string(curr)
                next()
                continue
            }

            break
        }

        val span = source_file.to_string(start, _position - start)

        new SimpleToken(SyntaxKind.StringToken, start, span, MakeSyntaxTokenValue.string(value))
    }

    def scan_char(): SimpleToken = {
        val start = _position
        next() // open '
        
        val curr = current()
        val value = if (curr == '\r' || curr == '\n' || curr == '\0') {
            diagnostics.report_unterminated_char(new TextLocation(source_file, new TextSpan(start, 1)))
            MakeSyntaxTokenValue.none()
        } else if (curr == '\'') {
            diagnostics.report_empty_char_literal(new TextLocation(source_file, new TextSpan(start, 2)))
            MakeSyntaxTokenValue.none()
        } else if (curr == '\\') {
            val result = scan_escape_sequence()
            if (result.is_success) MakeSyntaxTokenValue.char(string(result.value)[0])
            else MakeSyntaxTokenValue.none()
        } else {
            next() // character
            MakeSyntaxTokenValue.char(curr)
        }

        if (current() == '\'') {
            next() // close '
        } else {
            diagnostics.report_unterminated_char(new TextLocation(source_file, new TextSpan(start, 1)))
        }

        val span = source_file.to_string(start, _position - start)

        new SimpleToken(SyntaxKind.CharToken, start, span, value)
    }

    def scan_number(): SimpleToken = {
        val start = _position
        var value = hex_value()
        next()
        while (is_digit(current())) {
            value = (value * 10) + hex_value()
            next()
        }
        val span = source_file.to_string(start, _position - start)

        new SimpleToken(SyntaxKind.NumberToken, start, span, MakeSyntaxTokenValue.number(value))
    }

    def scan_simple_one(kind: int): SimpleToken = {
        val start = _position
        val span = source_file.to_string(_position, 1)
        next()
        new SimpleToken(kind, start, span, MakeSyntaxTokenValue.none())
    }

    def scan_simple_two(kind: int): SimpleToken = {
        val start = _position
        val span = source_file.to_string(_position, 2)
        next()
        next()
        new SimpleToken(kind, start, span, MakeSyntaxTokenValue.none())
    }

    def scan_ident(): SimpleToken = {
        val start = _position
        next()
        while (is_ident(current())) {
            next()
        }
        val span = source_file.to_string(start, _position - start)
        val kind = SyntaxFacts.get_keyword_kind(span)

        new SimpleToken(kind, start, span, MakeSyntaxTokenValue.none())
    }

    def scan_trivia(leading: bool): Array<SyntaxTrivia> = {
        val trivia = new SyntaxTriviaList()
        while (current() != '\0') {
            if (is_eol(current())) {
                trivia.add(scan_eol_trivia())
                if (!leading) {
                    // trailing trivia should always terminate at the end of a line
                    break
                } else {
                    // leading trivia will terminate once we find out first non-trivia token
                    continue
                }
            } else if (is_non_nl_whitespace(current())) {
                trivia.add(scan_whitespace_trivia())
                continue
            } else if (current() == '/' && lookahead() == '/') {
                trivia.add(scan_line_comment())
                continue
            } else if (current() == '/' && lookahead() == '*') {
                trivia.add(scan_block_comment())
                continue
            } else if (is_invalid_token_trivia(current())) {
                trivia.add(scan_invalid_token_trivia())
            } else {

            }

            break
        }
        
        trivia.to_array()
    }

    def scan_invalid_token_trivia(): SyntaxTrivia = {
        val token = scan_invalid_token()
        new SyntaxTrivia(token.kind, token.start, token.text)
    }

    def scan_line_comment(): SyntaxTrivia = {
        val start = _position
        next() // '/'
        next() // '/'

        while (current() != '\r' && current() != '\n' && current() != '\0') {
            next()
        }

        val span = source_file.to_string(start, _position - start)

        new SyntaxTrivia(SyntaxKind.LineCommentTrivia, start, span)
    }

    def scan_block_comment(): SyntaxTrivia = {
        val start = _position
        next() // '/'
        next() // '*'

        while (true) {
            val curr = current()
            val look = lookahead()

            if (curr == '\0') {
                diagnostics.report_unterminated_block_comment(new TextLocation(source_file, new TextSpan(start, _position - start)))
                break
            } else if (curr == '*' && look == '/') {
                next()
                next()
                break
            } else {
                next()
            }
        }

        val span = source_file.to_string(start, _position - start)

        new SyntaxTrivia(SyntaxKind.BlockCommentTrivia, start, span)
    }

    def scan_eol_trivia(): SyntaxTrivia = {
        val start = _position
        next()
        while (is_eol(current())) {
            next()
        }
        val span = source_file.to_string(start, _position - start)

        new SyntaxTrivia(SyntaxKind.EndOfLineTrivia, start, span)
    }

    def scan_whitespace_trivia(): SyntaxTrivia = {
        val start = _position
        next()
        while (is_non_nl_whitespace(current())) {
            next()
        }
        val span = source_file.to_string(start, _position - start)

        new SyntaxTrivia(SyntaxKind.WhitespaceTrivia, start, span)
    }
}
