object MakeCompilation {
    def create(trees: Array<SyntaxTree>): Compilation = {
        val diagnosticBag = new DiagnosticBag()
        val root = new Symbol(SymbolKind.Root, "", TextLocationFactory.empty(), new Symbol[0])
        val root_scope = root.members

        var num_diags = 0
        for (x <- 0 to trees.Length) {
            num_diags = num_diags + trees[x].diagnostics.Length
            val binder = new Binder(root_scope, diagnosticBag)
            binder.bind_compilation_unit(trees[x].root)
        }
        val bind_diagnostics = diagnosticBag.diagnostics()
        num_diags = num_diags + bind_diagnostics.Length

        val all_diags = new Diagnostic[num_diags]
        var diag = 0
        for (i <- 0 to trees.Length) {
            for (d <- 0 to trees[i].diagnostics.Length) {
                all_diags[diag] = trees[i].diagnostics[d]
                diag = diag + 1
            }
        }

        for (b <- 0 to bind_diagnostics.Length) {
            all_diags[diag] = bind_diagnostics[b]
            diag = diag + 1
        }

        val checker = new Checker()
        checker.infer_types(root)

        new Compilation(trees, root, all_diags)
    }
}

class Compilation(syntaxTrees: Array<SyntaxTree>, root: Symbol, diagnostics: Array<Diagnostic>) {
    def print_symbols(): unit = SymbolTreePrinter.print_symbol(root)
}