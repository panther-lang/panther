/**
    separatorToken may be either a `.` or `,` in the case
*/

class TypeAnnotationSyntax(colonToken: SyntaxToken, type: NameSyntax)

class ArrayInitializerExpressionSyntax(
    openBrace: SyntaxToken,
    expressions: ExpressionListSyntax,
    closeBrace: SyntaxToken
)

class ArrayCreationExpressionSyntax(
    newKeyword: SyntaxToken,
    name: NameSyntax,
    openBracket: SyntaxToken,
    arrayRank: Array<ExpressionSyntax>,
    closeBracket: SyntaxToken,
    initializer: Array<ArrayInitializerExpressionSyntax>
)

class IdentifierNameSyntax(identifier: SyntaxToken)
class GenericNameSyntax(
    identifier: SyntaxToken,
    typeArgumentlist: TypeArgumentListSyntax
)
class QualifiedNameSyntax(left: NameSyntax, dotToken: SyntaxToken, right: SimpleNameSyntax)

class SimpleNameSyntax(
    kind: int,
    genericName: Array<GenericNameSyntax>,
    identifierName: Array<IdentifierNameSyntax>
)
class NameSyntax(
    kind: int,
    qualifiedName: Array<QualifiedNameSyntax>,
    simpleName: Array<SimpleNameSyntax>
)
class ExpressionItemSyntax(expression: ExpressionSyntax, separatorToken: Array<SyntaxToken>)
class ExpressionListSyntax(expressions: Array<ExpressionItemSyntax>)

class AssignmentExpressionSyntax(
    left: ExpressionSyntax,
    equals: SyntaxToken,
    right: ExpressionSyntax
)
class BinaryExpressionSyntax(left: ExpressionSyntax, operator: SyntaxToken, right: ExpressionSyntax)
class BlockExpressionSyntax(
    openBrace: SyntaxToken,
    statements: Array<StatementSyntax>,
    expression: Array<ExpressionSyntax>, /* 0 to 1 */
    closeBrace: SyntaxToken
)
class CallExpressionSyntax(
    name: ExpressionSyntax,
    openParen: SyntaxToken,
    arguments: ExpressionListSyntax,
    closeParen: SyntaxToken
)
class ForExpressionSyntax(
    forKeyword: SyntaxToken,
    openParen: SyntaxToken,
    identifier: SyntaxToken,
    arrow: SyntaxToken,
    fromExpr: ExpressionSyntax,
    toKeyword: SyntaxToken,
    toExpr: ExpressionSyntax,
    closeParen: SyntaxToken,
    body: ExpressionSyntax
)
class GroupExpressionSyntax(
    openParen: SyntaxToken,
    expression: ExpressionSyntax,
    closeParen: SyntaxToken
)
class IfExpressionSyntax(
    ifKeyword: SyntaxToken,
    openParen: SyntaxToken,
    condition: ExpressionSyntax,
    closeParen: SyntaxToken,
    then: ExpressionSyntax,
    elseKeyword: SyntaxToken,
    elseExpr: ExpressionSyntax
)
class IndexExpressionSyntax(
    left: ExpressionSyntax,
    openBracket: SyntaxToken,
    index: ExpressionSyntax,
    closeBracket: SyntaxToken
)
class LiteralExpressionSyntax(token: SyntaxToken, value: SyntaxTokenValue)
class MemberAccessExpressionSyntax(
    left: ExpressionSyntax,
    dotToken: SyntaxToken,
    right: ExpressionSyntax
)
class NewExpressionSyntax(
    newKeyword: SyntaxToken,
    identifier: NameSyntax,
    openParen: SyntaxToken,
    arguments: ExpressionListSyntax,
    closeParen: SyntaxToken
)
class UnaryExpressionSyntax(operator: SyntaxToken, expression: ExpressionSyntax)
class UnitExpressionSyntax(openParen: SyntaxToken, closeParen: SyntaxToken)
class WhileExpressionSyntax(
    whileKeyword: SyntaxToken,
    openParen: SyntaxToken,
    left: ExpressionSyntax,
    closeParen: SyntaxToken,
    body: ExpressionSyntax
)

class ExpressionSyntax(
    kind: int,
    arrayCreationExpression: Array<ArrayCreationExpressionSyntax>,
    assignmentExpression: Array<AssignmentExpressionSyntax>,
    binaryExpression: Array<BinaryExpressionSyntax>,
    blockExpression: Array<BlockExpressionSyntax>,
    callExpression: Array<CallExpressionSyntax>,
    forExpression: Array<ForExpressionSyntax>,
    groupExpression: Array<GroupExpressionSyntax>,
    identifierName: Array<IdentifierNameSyntax>,
    ifExpression: Array<IfExpressionSyntax>,
    indexExpression: Array<IndexExpressionSyntax>,
    literalExpression: Array<LiteralExpressionSyntax>,
    memberAccessExpression: Array<MemberAccessExpressionSyntax>,
    newExpression: Array<NewExpressionSyntax>,
    unaryExpression: Array<UnaryExpressionSyntax>,
    unitExpression: Array<UnitExpressionSyntax>,
    whileExpression: Array<WhileExpressionSyntax>
) {
    var id = -1 // used in type checker
}

class FunctionBodySyntax(equalToken: SyntaxToken, expression: ExpressionSyntax)
class ParameterSyntax(
    identifier: SyntaxToken,
    typeAnnotation: TypeAnnotationSyntax,
    commaToken: Array<SyntaxToken>
)

class TypeArgumentItemSyntax(name: NameSyntax, separator: Array<SyntaxToken>)

class TypeArgumentListSyntax(
    lessThanToken: SyntaxToken,
    arguments: Array<TypeArgumentItemSyntax>,
    greaterThanToken: SyntaxToken
)

class UsingDirectiveSyntax(usingKeyword: SyntaxToken, name: NameSyntax)

class TemplateSyntax(
    openBrace: SyntaxToken,
    members: Array<MemberSyntax>,
    closeBrace: SyntaxToken
)

class ObjectDeclarationSyntax(
    objectKeyword: SyntaxToken,
    identifier: SyntaxToken,
    template: TemplateSyntax
)

class ClassDeclarationSyntax(
    classKeyword: SyntaxToken,
    identifier: SyntaxToken,
    openParenToken: SyntaxToken,
    parameters: Array<ParameterSyntax>,
    closeParenToken: SyntaxToken,
    template: Array<TemplateSyntax>
)

class FunctionDeclarationSyntax(
    defKeyword: SyntaxToken,
    identifier: SyntaxToken,
    openParenToken: SyntaxToken,
    parameters: Array<ParameterSyntax>,
    closeParenToken: SyntaxToken,
    typeAnnotation: Array<TypeAnnotationSyntax>,
    body: Array<FunctionBodySyntax>
)

class VariableDeclarationStatementSyntax(
    valOrVarKeyword: SyntaxToken,
    identifier: SyntaxToken,
    typeAnnotation: Array<TypeAnnotationSyntax>,
    equalToken: SyntaxToken,
    expression: ExpressionSyntax
)
class BreakStatementSyntax(breakKeyword: SyntaxToken)
class ContinueStatementSyntax(continueKeyword: SyntaxToken)
class ExpressionStatementSyntax(expression: ExpressionSyntax)

class StatementSyntax(
    kind: int,
    variableDeclarationStatement: Array<VariableDeclarationStatementSyntax>,
    breakStatement: Array<BreakStatementSyntax>,
    continueStatement: Array<ContinueStatementSyntax>,
    expressionStatement: Array<ExpressionStatementSyntax>
)

class GlobalStatementSyntax(statement: StatementSyntax)

class MemberSyntax(
    kind: int,
    objects: Array<ObjectDeclarationSyntax>,
    classes: Array<ClassDeclarationSyntax>,
    functions: Array<FunctionDeclarationSyntax>,
    statements: Array<GlobalStatementSyntax>
)

/**
  * names [1..n]
  */
class NamespaceDeclarationSyntax(namespaceKeyword: SyntaxToken, name: NameSyntax)


/**
    namespaceDeclaration [0..1]
    usings [0..n]
    members [0..n]
*/
class CompilationUnitSyntax(namespaceDeclaration: Array<NamespaceDeclarationSyntax>, usings: Array<UsingDirectiveSyntax>, members: Array<MemberSyntax>, endToken: SyntaxToken) {
    val kind = SyntaxKind.CompilationUnit
}


object DeclarationKind {
    val Object = 1
    val Class = 2
    val Method = 3
    val Parameter = 4
    val Local = 5
    val Token = 6
}

// A declaration is any syntax that defines a binding, the type of the
// symbol will not always match the declarations.
// For example, a constructor symbol will usually have a Class declaration
// and field symbols can either be Local declarations or Parameter declarations
class Declaration(
    kind: int,
    name: string,
    location: TextLocation,
    object_declaration: Array<ObjectDeclarationSyntax>,
    class_declaration: Array<ClassDeclarationSyntax>,
    function_declaration: Array<FunctionDeclarationSyntax>,
    parameter_declaration: Array<ParameterSyntax>,
    local_declaration: Array<VariableDeclarationStatementSyntax>,
    token_declaration: Array<SyntaxToken>
) {
    var id = -1 // used in type checker
}

object MakeDeclaration {
    def obj(node: ObjectDeclarationSyntax): Declaration =
        new Declaration(
            DeclarationKind.Object,
            node.identifier.text,
            node.identifier.location,
            new ObjectDeclarationSyntax[] { node },
            new ClassDeclarationSyntax[0],
            new FunctionDeclarationSyntax[0],
            new ParameterSyntax[0],
            new VariableDeclarationStatementSyntax[0],
            new SyntaxToken[0]
        )

    def cls(node: ClassDeclarationSyntax): Declaration =
        new Declaration(
            DeclarationKind.Class,
            node.identifier.text,
            node.identifier.location,
            new ObjectDeclarationSyntax[0],
            new ClassDeclarationSyntax[] { node },
            new FunctionDeclarationSyntax[0],
            new ParameterSyntax[0],
            new VariableDeclarationStatementSyntax[0],
            new SyntaxToken[0]
        )

    def function(node: FunctionDeclarationSyntax): Declaration =
        new Declaration(
            DeclarationKind.Method,
            node.identifier.text,
            node.identifier.location,
            new ObjectDeclarationSyntax[0],
            new ClassDeclarationSyntax[0],
            new FunctionDeclarationSyntax[] { node },
            new ParameterSyntax[0],
            new VariableDeclarationStatementSyntax[0],
            new SyntaxToken[0]
        )

    def parameter(node: ParameterSyntax): Declaration =
        new Declaration(
            DeclarationKind.Parameter,
            node.identifier.text,
            node.identifier.location,
            new ObjectDeclarationSyntax[0],
            new ClassDeclarationSyntax[0],
            new FunctionDeclarationSyntax[0],
            new ParameterSyntax[] { node },
            new VariableDeclarationStatementSyntax[0],
            new SyntaxToken[0]
        )

    def local(node: VariableDeclarationStatementSyntax): Declaration =
        new Declaration(
            DeclarationKind.Local,
            node.identifier.text,
            node.identifier.location,
            new ObjectDeclarationSyntax[0],
            new ClassDeclarationSyntax[0],
            new FunctionDeclarationSyntax[0],
            new ParameterSyntax[0],
            new VariableDeclarationStatementSyntax[] { node },
            new SyntaxToken[0]
        )

    def token(node: SyntaxToken): Declaration =
        new Declaration(
            DeclarationKind.Local,
            node.text,
            node.location,
            new ObjectDeclarationSyntax[0],
            new ClassDeclarationSyntax[0],
            new FunctionDeclarationSyntax[0],
            new ParameterSyntax[0],
            new VariableDeclarationStatementSyntax[0],
            new SyntaxToken[] { node }
        )
}


// A Node represents any piece of the AST
class Node(
    declaration: Array<Declaration>,
    expression: Array<ExpressionSyntax>
) {

    def is_decl(): bool = declaration.Length > 0

    def id(): int =
        if (is_decl()) declaration[0].id
        else expression[0].id

    def set_id(value: int): unit = {
        if (is_decl()) {
            declaration[0].id = value
        } else {
            expression[0].id = value
        }
    }
}

object MakeNode {
    def decl(declaration: Declaration): Node = new Node(new Declaration[] { declaration }, new ExpressionSyntax[0])
    def expr(expression: ExpressionSyntax): Node = new Node(new Declaration[0], new ExpressionSyntax[] { expression })
}